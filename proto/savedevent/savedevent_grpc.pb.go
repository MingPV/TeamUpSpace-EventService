// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/savedevent/savedevent.proto

package savedevent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SavedEventService_SaveEvent_FullMethodName        = "/savedevent.SavedEventService/SaveEvent"
	SavedEventService_FindSavedEvent_FullMethodName   = "/savedevent.SavedEventService/FindSavedEvent"
	SavedEventService_FindAllByUser_FullMethodName    = "/savedevent.SavedEventService/FindAllByUser"
	SavedEventService_FindAllByEvent_FullMethodName   = "/savedevent.SavedEventService/FindAllByEvent"
	SavedEventService_DeleteSavedEvent_FullMethodName = "/savedevent.SavedEventService/DeleteSavedEvent"
)

// SavedEventServiceClient is the client API for SavedEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SavedEventServiceClient interface {
	SaveEvent(ctx context.Context, in *SaveEventRequest, opts ...grpc.CallOption) (*SaveEventResponse, error)
	FindSavedEvent(ctx context.Context, in *FindSavedEventRequest, opts ...grpc.CallOption) (*FindSavedEventResponse, error)
	FindAllByUser(ctx context.Context, in *FindAllByUserRequest, opts ...grpc.CallOption) (*FindAllByUserResponse, error)
	FindAllByEvent(ctx context.Context, in *FindAllByEventRequest, opts ...grpc.CallOption) (*FindAllByEventResponse, error)
	DeleteSavedEvent(ctx context.Context, in *DeleteSavedEventRequest, opts ...grpc.CallOption) (*DeleteSavedEventResponse, error)
}

type savedEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSavedEventServiceClient(cc grpc.ClientConnInterface) SavedEventServiceClient {
	return &savedEventServiceClient{cc}
}

func (c *savedEventServiceClient) SaveEvent(ctx context.Context, in *SaveEventRequest, opts ...grpc.CallOption) (*SaveEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveEventResponse)
	err := c.cc.Invoke(ctx, SavedEventService_SaveEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedEventServiceClient) FindSavedEvent(ctx context.Context, in *FindSavedEventRequest, opts ...grpc.CallOption) (*FindSavedEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSavedEventResponse)
	err := c.cc.Invoke(ctx, SavedEventService_FindSavedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedEventServiceClient) FindAllByUser(ctx context.Context, in *FindAllByUserRequest, opts ...grpc.CallOption) (*FindAllByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByUserResponse)
	err := c.cc.Invoke(ctx, SavedEventService_FindAllByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedEventServiceClient) FindAllByEvent(ctx context.Context, in *FindAllByEventRequest, opts ...grpc.CallOption) (*FindAllByEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByEventResponse)
	err := c.cc.Invoke(ctx, SavedEventService_FindAllByEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedEventServiceClient) DeleteSavedEvent(ctx context.Context, in *DeleteSavedEventRequest, opts ...grpc.CallOption) (*DeleteSavedEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSavedEventResponse)
	err := c.cc.Invoke(ctx, SavedEventService_DeleteSavedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SavedEventServiceServer is the server API for SavedEventService service.
// All implementations must embed UnimplementedSavedEventServiceServer
// for forward compatibility.
type SavedEventServiceServer interface {
	SaveEvent(context.Context, *SaveEventRequest) (*SaveEventResponse, error)
	FindSavedEvent(context.Context, *FindSavedEventRequest) (*FindSavedEventResponse, error)
	FindAllByUser(context.Context, *FindAllByUserRequest) (*FindAllByUserResponse, error)
	FindAllByEvent(context.Context, *FindAllByEventRequest) (*FindAllByEventResponse, error)
	DeleteSavedEvent(context.Context, *DeleteSavedEventRequest) (*DeleteSavedEventResponse, error)
	mustEmbedUnimplementedSavedEventServiceServer()
}

// UnimplementedSavedEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSavedEventServiceServer struct{}

func (UnimplementedSavedEventServiceServer) SaveEvent(context.Context, *SaveEventRequest) (*SaveEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEvent not implemented")
}
func (UnimplementedSavedEventServiceServer) FindSavedEvent(context.Context, *FindSavedEventRequest) (*FindSavedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSavedEvent not implemented")
}
func (UnimplementedSavedEventServiceServer) FindAllByUser(context.Context, *FindAllByUserRequest) (*FindAllByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByUser not implemented")
}
func (UnimplementedSavedEventServiceServer) FindAllByEvent(context.Context, *FindAllByEventRequest) (*FindAllByEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByEvent not implemented")
}
func (UnimplementedSavedEventServiceServer) DeleteSavedEvent(context.Context, *DeleteSavedEventRequest) (*DeleteSavedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSavedEvent not implemented")
}
func (UnimplementedSavedEventServiceServer) mustEmbedUnimplementedSavedEventServiceServer() {}
func (UnimplementedSavedEventServiceServer) testEmbeddedByValue()                           {}

// UnsafeSavedEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SavedEventServiceServer will
// result in compilation errors.
type UnsafeSavedEventServiceServer interface {
	mustEmbedUnimplementedSavedEventServiceServer()
}

func RegisterSavedEventServiceServer(s grpc.ServiceRegistrar, srv SavedEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedSavedEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SavedEventService_ServiceDesc, srv)
}

func _SavedEventService_SaveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedEventServiceServer).SaveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SavedEventService_SaveEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedEventServiceServer).SaveEvent(ctx, req.(*SaveEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SavedEventService_FindSavedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSavedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedEventServiceServer).FindSavedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SavedEventService_FindSavedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedEventServiceServer).FindSavedEvent(ctx, req.(*FindSavedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SavedEventService_FindAllByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedEventServiceServer).FindAllByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SavedEventService_FindAllByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedEventServiceServer).FindAllByUser(ctx, req.(*FindAllByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SavedEventService_FindAllByEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedEventServiceServer).FindAllByEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SavedEventService_FindAllByEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedEventServiceServer).FindAllByEvent(ctx, req.(*FindAllByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SavedEventService_DeleteSavedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedEventServiceServer).DeleteSavedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SavedEventService_DeleteSavedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedEventServiceServer).DeleteSavedEvent(ctx, req.(*DeleteSavedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SavedEventService_ServiceDesc is the grpc.ServiceDesc for SavedEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SavedEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "savedevent.SavedEventService",
	HandlerType: (*SavedEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveEvent",
			Handler:    _SavedEventService_SaveEvent_Handler,
		},
		{
			MethodName: "FindSavedEvent",
			Handler:    _SavedEventService_FindSavedEvent_Handler,
		},
		{
			MethodName: "FindAllByUser",
			Handler:    _SavedEventService_FindAllByUser_Handler,
		},
		{
			MethodName: "FindAllByEvent",
			Handler:    _SavedEventService_FindAllByEvent_Handler,
		},
		{
			MethodName: "DeleteSavedEvent",
			Handler:    _SavedEventService_DeleteSavedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/savedevent/savedevent.proto",
}
