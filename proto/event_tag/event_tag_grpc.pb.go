// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/event_tag/event_tag.proto

package event_tag_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventTagService_CreateEventTag_FullMethodName      = "/event_tag.EventTagService/CreateEventTag"
	EventTagService_FindByEventAndTagID_FullMethodName = "/event_tag.EventTagService/FindByEventAndTagID"
	EventTagService_FindByEventID_FullMethodName       = "/event_tag.EventTagService/FindByEventID"
	EventTagService_FindByTagID_FullMethodName         = "/event_tag.EventTagService/FindByTagID"
	EventTagService_FindAllEventTags_FullMethodName    = "/event_tag.EventTagService/FindAllEventTags"
	EventTagService_DeleteEventTag_FullMethodName      = "/event_tag.EventTagService/DeleteEventTag"
)

// EventTagServiceClient is the client API for EventTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventTagServiceClient interface {
	CreateEventTag(ctx context.Context, in *CreateEventTagRequest, opts ...grpc.CallOption) (*CreateEventTagResponse, error)
	FindByEventAndTagID(ctx context.Context, in *FindByEventAndTagIDRequest, opts ...grpc.CallOption) (*FindByEventAndTagIDResponse, error)
	FindByEventID(ctx context.Context, in *FindByEventIDRequest, opts ...grpc.CallOption) (*FindByEventIDResponse, error)
	FindByTagID(ctx context.Context, in *FindByTagIDRequest, opts ...grpc.CallOption) (*FindByTagIDResponse, error)
	FindAllEventTags(ctx context.Context, in *FindAllEventTagsRequest, opts ...grpc.CallOption) (*FindAllEventTagsResponse, error)
	DeleteEventTag(ctx context.Context, in *DeleteEventTagRequest, opts ...grpc.CallOption) (*DeleteEventTagResponse, error)
}

type eventTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTagServiceClient(cc grpc.ClientConnInterface) EventTagServiceClient {
	return &eventTagServiceClient{cc}
}

func (c *eventTagServiceClient) CreateEventTag(ctx context.Context, in *CreateEventTagRequest, opts ...grpc.CallOption) (*CreateEventTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventTagResponse)
	err := c.cc.Invoke(ctx, EventTagService_CreateEventTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTagServiceClient) FindByEventAndTagID(ctx context.Context, in *FindByEventAndTagIDRequest, opts ...grpc.CallOption) (*FindByEventAndTagIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByEventAndTagIDResponse)
	err := c.cc.Invoke(ctx, EventTagService_FindByEventAndTagID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTagServiceClient) FindByEventID(ctx context.Context, in *FindByEventIDRequest, opts ...grpc.CallOption) (*FindByEventIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByEventIDResponse)
	err := c.cc.Invoke(ctx, EventTagService_FindByEventID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTagServiceClient) FindByTagID(ctx context.Context, in *FindByTagIDRequest, opts ...grpc.CallOption) (*FindByTagIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByTagIDResponse)
	err := c.cc.Invoke(ctx, EventTagService_FindByTagID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTagServiceClient) FindAllEventTags(ctx context.Context, in *FindAllEventTagsRequest, opts ...grpc.CallOption) (*FindAllEventTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllEventTagsResponse)
	err := c.cc.Invoke(ctx, EventTagService_FindAllEventTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTagServiceClient) DeleteEventTag(ctx context.Context, in *DeleteEventTagRequest, opts ...grpc.CallOption) (*DeleteEventTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEventTagResponse)
	err := c.cc.Invoke(ctx, EventTagService_DeleteEventTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTagServiceServer is the server API for EventTagService service.
// All implementations must embed UnimplementedEventTagServiceServer
// for forward compatibility.
type EventTagServiceServer interface {
	CreateEventTag(context.Context, *CreateEventTagRequest) (*CreateEventTagResponse, error)
	FindByEventAndTagID(context.Context, *FindByEventAndTagIDRequest) (*FindByEventAndTagIDResponse, error)
	FindByEventID(context.Context, *FindByEventIDRequest) (*FindByEventIDResponse, error)
	FindByTagID(context.Context, *FindByTagIDRequest) (*FindByTagIDResponse, error)
	FindAllEventTags(context.Context, *FindAllEventTagsRequest) (*FindAllEventTagsResponse, error)
	DeleteEventTag(context.Context, *DeleteEventTagRequest) (*DeleteEventTagResponse, error)
	mustEmbedUnimplementedEventTagServiceServer()
}

// UnimplementedEventTagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventTagServiceServer struct{}

func (UnimplementedEventTagServiceServer) CreateEventTag(context.Context, *CreateEventTagRequest) (*CreateEventTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventTag not implemented")
}
func (UnimplementedEventTagServiceServer) FindByEventAndTagID(context.Context, *FindByEventAndTagIDRequest) (*FindByEventAndTagIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEventAndTagID not implemented")
}
func (UnimplementedEventTagServiceServer) FindByEventID(context.Context, *FindByEventIDRequest) (*FindByEventIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEventID not implemented")
}
func (UnimplementedEventTagServiceServer) FindByTagID(context.Context, *FindByTagIDRequest) (*FindByTagIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTagID not implemented")
}
func (UnimplementedEventTagServiceServer) FindAllEventTags(context.Context, *FindAllEventTagsRequest) (*FindAllEventTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEventTags not implemented")
}
func (UnimplementedEventTagServiceServer) DeleteEventTag(context.Context, *DeleteEventTagRequest) (*DeleteEventTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventTag not implemented")
}
func (UnimplementedEventTagServiceServer) mustEmbedUnimplementedEventTagServiceServer() {}
func (UnimplementedEventTagServiceServer) testEmbeddedByValue()                         {}

// UnsafeEventTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventTagServiceServer will
// result in compilation errors.
type UnsafeEventTagServiceServer interface {
	mustEmbedUnimplementedEventTagServiceServer()
}

func RegisterEventTagServiceServer(s grpc.ServiceRegistrar, srv EventTagServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventTagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventTagService_ServiceDesc, srv)
}

func _EventTagService_CreateEventTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTagServiceServer).CreateEventTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTagService_CreateEventTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTagServiceServer).CreateEventTag(ctx, req.(*CreateEventTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTagService_FindByEventAndTagID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByEventAndTagIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTagServiceServer).FindByEventAndTagID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTagService_FindByEventAndTagID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTagServiceServer).FindByEventAndTagID(ctx, req.(*FindByEventAndTagIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTagService_FindByEventID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByEventIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTagServiceServer).FindByEventID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTagService_FindByEventID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTagServiceServer).FindByEventID(ctx, req.(*FindByEventIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTagService_FindByTagID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByTagIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTagServiceServer).FindByTagID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTagService_FindByTagID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTagServiceServer).FindByTagID(ctx, req.(*FindByTagIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTagService_FindAllEventTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEventTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTagServiceServer).FindAllEventTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTagService_FindAllEventTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTagServiceServer).FindAllEventTags(ctx, req.(*FindAllEventTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTagService_DeleteEventTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTagServiceServer).DeleteEventTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTagService_DeleteEventTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTagServiceServer).DeleteEventTag(ctx, req.(*DeleteEventTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventTagService_ServiceDesc is the grpc.ServiceDesc for EventTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_tag.EventTagService",
	HandlerType: (*EventTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventTag",
			Handler:    _EventTagService_CreateEventTag_Handler,
		},
		{
			MethodName: "FindByEventAndTagID",
			Handler:    _EventTagService_FindByEventAndTagID_Handler,
		},
		{
			MethodName: "FindByEventID",
			Handler:    _EventTagService_FindByEventID_Handler,
		},
		{
			MethodName: "FindByTagID",
			Handler:    _EventTagService_FindByTagID_Handler,
		},
		{
			MethodName: "FindAllEventTags",
			Handler:    _EventTagService_FindAllEventTags_Handler,
		},
		{
			MethodName: "DeleteEventTag",
			Handler:    _EventTagService_DeleteEventTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event_tag/event_tag.proto",
}
