basePath: /api/v1
definitions:
  dto.CreateEventRequest:
    properties:
      end_at:
        type: string
      event_description:
        type: string
      event_name:
        type: string
      main_image_url:
        type: string
      register_close_dt:
        type: string
      register_start_dt:
        type: string
      start_at:
        type: string
    required:
    - end_at
    - event_description
    - event_name
    - main_image_url
    - register_close_dt
    - register_start_dt
    - start_at
    type: object
  dto.EventResponse:
    properties:
      end_at:
        type: string
      event_description:
        type: string
      event_name:
        type: string
      id:
        type: integer
      main_image_url:
        type: string
      register_close_dt:
        type: string
      register_start_dt:
        type: string
      start_at:
        type: string
    type: object
  entities.Event:
    properties:
      created_at:
        type: string
      end_at:
        type: string
      event_description:
        type: string
      event_name:
        type: string
      id:
        type: integer
      main_image_url:
        type: string
      register_close_dt:
        type: string
      register_start_dt:
        type: string
      start_at:
        type: string
      updated_at:
        type: string
    type: object
  entities.Order:
    properties:
      id:
        type: integer
      total:
        type: number
    type: object
  responses.MessageResponse:
    properties:
      message:
        example: example message
        type: string
    type: object
host: localhost:8003
info:
  contact: {}
  description: API documentation for the Event Service
  title: TeamUpSpace Event Service API
  version: "1.0"
paths:
  /events:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Event'
            type: array
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      parameters:
      - description: Event payload
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.EventResponse'
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Delete an event by ID
      tags:
      - events
    get:
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Event'
      summary: Get event by ID
      tags:
      - events
    patch:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Event update payload
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/entities.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Event'
      summary: Update an event partially
      tags:
      - events
  /orders:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Order'
            type: array
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      parameters:
      - description: Order payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entities.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Order'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    delete:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Delete an order by ID
      tags:
      - orders
    get:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Order'
      summary: Get order by ID
      tags:
      - orders
    patch:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order update payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entities.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Order'
      summary: Update an order partially
      tags:
      - orders
swagger: "2.0"
